<div class="row">
	<div class="page-header">
		<h1><small>Please provide the following details so we can find a matching plan</small></h1>
	</div>
</div>

<div class="row">
	<div class="col-lg-4">

		<form role="form" action="/savePlan" onsubmit="return !!(validateForm() && confirm('Are you sure you want to create a new plan?'));" name="search_create_form" method="POST" id="form1">

			<div class="form-group">
				<label for="date_id">Date</label>
				<input type="date" class="form-control" id="date_id" name="date">
			</div>

			<div class="form-group">
				<label for="time_id">Time</label>
				<input type="time" class="form-control" id="time_id" name="time">
			</div>

			<div class="form-group">
				<label for="source_id">Source <a id="source_umcl">use my current location</a></label>
				<input type="text" class="form-control" id="source_id" name="source" placeholder="Enter Source Address">
			</div>

			<div class="form-group">
				<label for="destination_id">Destination <a id="destination_umcl">use my current location</a></label>
				<input type="text" class="form-control" id="destination_id" name="destination" placeholder="Enter Destination Address">
			</div>

			<div class="form-group">
				<label for="no_of_people_id">Number of people: </label>
				<input type="number" class="form-control" id="no_of_people_id" name="no_of_people">
			</div>

			<div class="form-group">
				<button type="button" onclick="return send()" class="btn btn-primary" id="similar_btn">View Similar Plans</button>
				<button type="submit" class="btn btn-default" id="create_btn">Create a new Plan</button>
			</div>

			<fieldset class="details_src" hidden="true">
				<label>Latitude</label>
				<input name="lat" type="text" value="" id="source_lat">
				<label>Longitude</label>
				<input name="lng" type="text" value="" id="source_long">
			</fieldset>

			<fieldset class="details_dest" hidden="true">
				<label>Latitude</label>
				<input name="lat" type="text" value="" id="dest_lat">
				<label>Longitude</label>
				<input name="lng" type="text" value="" id="dest_long">
			</fieldset>
		</form>
	</div>
	<div class="col-lg-8">
		<div id="map_canvas" style="width: 100%; height:400px;"></div>
	</div>
</div>

<div id="resultsDiv" style="display:none">
	<div class="row">
		<div class="page-header">
			<h1><small>Similar Plans</small></h1>
		</div>
	</div>

	<div class="row">
		<div class="col-lg-12 col-sm-12" id="result">
			<table id="resultTable" class="table table-striped table-bordered table-dark" cellspacing="0" width="100%" border="1">
				<thead>
					<tr>
						<th></th>
						<th hidden="true"></th>
						<th>No.</th>
						<th>Source</th>
						<th>Distance from Source (in miles)</th>
						<th>Destination</th>
						<th>Distance from Destination (in miles)</th>
						<th>Date</th>
						<th>Time (24 hour format)</th>
						<th>Seats occupied</th>
						<th>Vacancy</th>
					</tr>
				</thead>
			</table>

			<div class="form-group">
				<button type="button" onclick="return joinPlan()" class="btn btn-primary">Join Plan</button>
			</div>

		</div>
	</div>
</div>

<script>
	var currLat = 0;
	var currLong = 0;

	var sourceObject;
	var sourceAutocomplete;

	var destinationAutocomplete;
	var destinationObject;

	var marker;
	var map;

	var geocoder = new google.maps.Geocoder;

	$(document).ready(function() {
		$('#create_btn').hide();

		// Create Map
		map = new google.maps.Map(document.getElementById('map_canvas'), {
			mapTypeControl: false,
			center: {
				lat: 35.7847,
				lng: -78.6821
			},
			zoom: 16
		});

		// Create marker to show on Map
		marker = new google.maps.Marker({
			position: {
				lat: currLat,
				lng: currLong
			},
			animation: google.maps.Animation.DROP,
			map: map
		});

		if (navigator.geolocation) {
			console.log(navigator.geolocation.getCurrentPosition(showPosition));
		} else {
			alert("Geolocation is not supported by this browser.");
		}

		function showPosition(position) {
			currLat = position.coords.latitude;
			currLong = position.coords.longitude;

			// Create and Bind inputs to Map
			sourceAutocomplete = new google.maps.places.Autocomplete(document.getElementById('source_id'));
			destinationAutocomplete = new google.maps.places.Autocomplete(document.getElementById('destination_id'));

			sourceAutocomplete.bindTo('bounds', map);
			destinationAutocomplete.bindTo('bounds', map);

			// Event listeners on place change
			sourceAutocomplete.addListener('place_changed', function() {
				sourceObject = sourceAutocomplete.getPlace();
				map.setCenter(sourceObject.geometry.location);
				marker.setLabel('Source');
				marker.setPosition(sourceObject.geometry.location);
			});

			destinationAutocomplete.addListener('place_changed', function() {
				destinationObject = destinationAutocomplete.getPlace();
				map.setCenter(destinationObject.geometry.location);
				marker.setLabel('Destination');
				marker.setPosition(destinationObject.geometry.location);
			});
		}
	});

	$('#source_umcl').click(function() {
		geocoder.geocode({
			'location': {
				lat: currLat,
				lng: currLong
			}
		}, function(results, status) {
			if (status === 'OK') {
				if (results[0]) {
					sourceObject = results[0];
					$('#source_id').val(sourceObject.formatted_address);
					map.setCenter(sourceObject.geometry.location);
					marker.setLabel('Source');
					marker.setPosition(sourceObject.geometry.location);
				}
			} else {
				console.log('Geocoder failed due to: ' + status);
			}
		});
	});

	$('#destination_umcl').click(function() {
		geocoder.geocode({
			'location': {
				lat: currLat,
				lng: currLong
			}
		}, function(results, status) {
			if (status === 'OK') {
				if (results[0]) {
					destinationObject = results[0];
					$('#destination_id').val(destinationObject.formatted_address);
					map.setCenter(destinationObject.geometry.location);
					marker.setLabel('Destination');
					marker.setPosition(destinationObject.geometry.location);
				}
			} else {
				console.log('Geocoder failed due to: ' + status);
			}
		});
	});

	function joinPlan() {

		var plans = document.getElementsByName("similar_plans");
		var selectedPlan;
		for (var i = 0; i < plans.length; i++) {
			if (plans[i].checked == true) {
				selectedPlan = plans[i].id;
				break;
			}
		}

		if (selectedPlan) {
			$.ajax({
				type: "POST",
				dataType: 'text',
				data: {
					"numberOfPeople": document.getElementById("no_of_people_id").value,
					"selectedPlan": selectedPlan
				},
				url: "/joinPlan",
				async: true,
				success: function(data) {
					if (data) {
						window.location.href = data;
					} else {
						alert("There was an error, please refresh and try again.");
					}
				},
				error: function(request, status, error) {
					alert(error);
					console.log(error);
				}
			});
		} else {
			alert("Please select a plan");
		}
	}

	function send() {
		if (!validateForm())
			return false;

		$.ajax({
			type: "POST",
			dataType: 'json',
			data: $("#form1").serialize(),
			url: "/searchPlan",
			async: true,
			success: function(json_data) {
				if ($.trim(json_data)) {

					var already_there = $("#resultsDiv").is(':visible');
					if (already_there) {
						$('#resultTable tbody> tr').remove();
					} else {
						$("#resultsDiv").show();
					}

					var len = json_data.length;

					for (var i = 0; i < len; i++) {
						item = json_data[i];
						var date_str = item.date.split("T");
						var tr_str = "<tr>" +
							"<td align='center'></td>" +
							"<td align='center' hidden='true'>" + item._id + "</td>" +
							"<td align='center'>" + (i + 1) + "</td>" +
							"<td align='center'>" + item.source_id + "</td>" +
							"<td align='center'>" + item.src_distance + "</td>" +
							"<td align='center'>" + item.destination_id + "</td>" +
							"<td align='center'>" + item.dest_distance + "</td>" +
							"<td align='center'>" + date_str[0] + "</td>" +
							"<td align='center'>" + item.time + "</td>" +
							"<td align='center'>" + item.no_of_people + "</td>" +
							"<td align='center'>" + item.vacancy + "</td>" +
							"</tr>";
						$("#resultTable").append(tr_str);
					}
					$('#resultTable').DataTable({
						columnDefs: [{
							orderable: false,
							render: function(data, type, full, meta) {
								if (type === 'display') {
									//new_data = '<input type="radio" name="similar_plans" id="'+full.toString().split(',')[1]+'" value="' + data + '">';
									new_data = '<input type="radio" name="similar_plans" id="' + full.toString().split(',')[1] + '">';
								}
								return new_data;
							},
							targets: 0
						}],
						select: {
							style: 'os',
							selector: 'td:first-child'
						},
						"bDestroy": true,
						order: [
							[1, 'asc']
						]
					});
				} else {
					$('#resultTable tbody> tr').remove();
					alert("No results found. Please create a plan.");
					$('#create_btn').show();
					$('#resultsDiv').hide();
					console.log("Empty JSON data received from PlanController");
				}
			},
			error: function(request, status, error) {
				alert(request.responseText);
				console.log(request.responseText);
			}
		});
	}

	function validateForm() {
		var x = document.forms["search_create_form"]["source"].value;
		if (x == "") {
			alert("Source must be filled out");
			return false;
		}
		x = document.forms["search_create_form"]["destination"].value;
		if (x == "") {
			alert("Destination must be filled out");
			return false;
		}
		x = document.forms["search_create_form"]["date"].value;
		if (x == "") {
			alert("Please select a date");
			return false;
		}
		var y = new Date();

		if (new Date(x + " 23:59:00") < y) {
			alert("Please enter a valid date");
			return false;
		}
		var t = document.forms["search_create_form"]["time"].value;
		if (t == "") {
			alert("Please enter time");
			return false;
		}
		x = new Date(x + " " + t + ":00");
		if (x < y) {
			alert("Please enter a valid time");
			return false;
		}
		x = document.forms["search_create_form"]["no_of_people"].value;
		if (x == "") {
			alert("Please enter number of people");
			return false;
		}
		if (x < 1 || x > 6) {
			alert("Please enter valid number of people");
			return false;
		}

		$('#source_lat').val(sourceObject.geometry.location.lat());
		$('#source_long').val(sourceObject.geometry.location.lng());
		$('#dest_lat').val(destinationObject.geometry.location.lat());
		$('#dest_long').val(destinationObject.geometry.location.lng());

		return true;
	}
</script>
